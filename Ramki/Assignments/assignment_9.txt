def maximum_intervals(intervals):
    count = 0
    intervals.sort(key=lambda x: x[1])  # sort based on finishing time
    e_t = float('-inf')
    for interval in intervals:
        s_t = interval[0]
        if(s_t >= e_t):
            count += 1
            e_t = interval[1]
    return count

intervals = [[1,10], [1,3], [3,5], [5,9]]
maximum_intervals(intervals)

def circular_tour(distance, charging):
    if(sum(charging)<sum(distance)):
        return -1
    total = 0
    n = len(charging)
    for i in range(0,n):
            feasible=0
            total=charging[i]
            current=i
            while(feasible<n):
                if(total<distance[current]):
                    break
                else:
                    feasible+=1
                    current+=1
                    if(current>=n):
                        current=n-current
                    if(current==0):
                        total+=(charging[current]-distance[n-1])                   
                    else:
                        total+=(charging[current]-distance[current-1])
            if(feasible==n):
                return i
    return -1

distance=[3, 4, 5, 1, 2]
charging=[1, 2, 3, 4, 5]
circular_tour(distance,charging)

# Feel free to change the class Node as per your requirement
class Node:
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right
        self.arr = []

class Wavelet_Tree:
    def __init__(self, A:list[int]=[]):
        self.unique_list = list(sorted(set(A)))
        self.num_list = A
        self.root = self.build_tree(A,self.unique_list)

    def build_tree(self,nums,unique_val):
        if(len(unique_val)<=1 or len(nums)<=1):
            return None
        left = unique_val[:len(unique_val)//2 if(len(unique_val)%2==0) else len(unique_val)//2+1]
        right = unique_val[len(unique_val)//2 if(len(unique_val)%2==0) else len(unique_val)//2+1:]
        left_nums = []
        right_nums = []
        bit_map = [] 
        for i in range(len(nums)):
            if(nums[i] in left):
                left_nums.append(nums[i])
                bit_map.append('0')
            else:
                right_nums.append(nums[i])
                bit_map.append('1')
        root = Node(''.join(bit_map),None,None)
        root.arr = nums

        if(len(left)>1):
            root.left = self.build_tree(left_nums,left)
        if(len(right)>1):
            root.right = self.build_tree(right_nums,right)
        return root

    def get_height(self,root):
        if root is None:
            return 0
        else:
            # Compute the height of each subtree
            lheight = self.get_height(root.left)
            rheight = self.get_height(root.right)
            # Use the larger one
            if lheight > rheight:
                return lheight+1
            else:
                return rheight+1

    def get_wavelet_level_order(self):
        # Return level order traversal of the tree. Except the last level
        if(self.root is None):
            return 
        queue = []
        level = 0
        queue.append((self.root,level))
        height = self.get_height(self.root)
        result = [[] for _ in range(height)]
        while queue:
            currSize = len(queue)
            level +=1
            while(currSize>0):
                  (node,current) = queue.pop(0)
                  if(node!=None):
                      result[current].append(node.data)
                  elif(current<len(result)):
                      result[current].append('X')
                  if(node):
                      # Enqueue left child
                      queue.append((node.left,level))
                      # Enqueue right child
                      queue.append((node.right,level))
                  currSize-=1
            
        return result

    def rank(self,root,value,idx,root_flag):
        pass

    def RQQ(self, k:int, l:int, r:int):
        # Return [kth smallest element, list of [k, l, r] values until you reach the kth smallest value in the range]
        pass

wv_tree = Wavelet_Tree([6, 2, 0, 7, 9, 3, 1, 8, 5, 4])
print(wv_tree.get_wavelet_level_order())

wv_tree.root